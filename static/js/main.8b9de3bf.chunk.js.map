{"version":3,"sources":["components/Clock.jsx","components/CountdownForm.jsx","components/Countdown.jsx","App.js","serviceWorker.js","index.js"],"names":["Clock","props","timeInSeconds","state","seconds","this","clearInterval","myInterval","minutes","Math","floor","className","formatTime","setInterval","setState","React","Component","CountdownForm","e","secondsStr","refs","value","onSetCountdownTime","preventDefault","ref","onSubmit","bind","type","placeholder","Countdown","count","update","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAiDeA,E,kDA9Cb,WAAYC,GAAQ,IAAD,0BAEXC,GADN,cAAMD,IACuBA,MAAvBC,cAFW,OAGjB,EAAKC,MAAQ,CACXC,QAASF,GAJM,E,uDAORA,GACiB,GAAtBG,KAAKF,MAAMC,SACbE,cAAcD,KAAKE,YAErB,IAAIH,EAAUF,EAAgB,GAC1BM,EAAUC,KAAKC,MAAMR,EAAgB,IAUzC,OARIE,EAAU,KACZA,EAAU,IAAMA,GAGdI,EAAU,KACZA,EAAU,IAAMA,GAGXA,EAAU,IAAMJ,I,+BAIvB,OACE,yBAAKO,UAAU,SACb,0BAAMA,UAAU,cACd,4BAAKN,KAAKO,WAAWP,KAAKF,MAAMC,c,0CAKnB,IAAD,OAClBC,KAAKE,WAAaM,aAAY,WAC5B,EAAKC,SAAS,CACZV,QAAS,EAAKD,MAAMC,QAAU,MAE/B,O,6CAGHE,cAAcD,KAAKE,gB,GA3CHQ,IAAMC,WC+BXC,E,uKA9BJC,GACP,IAAIC,EAAad,KAAKe,KAAKhB,QAAQiB,MACnChB,KAAKJ,MAAMqB,mBAAmBH,GAC9Bd,KAAKe,KAAKhB,QAAQiB,MAAQ,GAC1BH,EAAEK,mB,+BAGF,OACE,6BACE,0BACEC,IAAI,OACJC,SAAUpB,KAAKoB,SAASC,KAAKrB,MAC7BM,UAAU,kBAEV,2BACEgB,KAAK,OACLH,IAAI,UACJI,YAAY,0BAEd,2BACED,KAAK,SACLhB,UAAU,0BACVU,MAAM,0B,GAvBUN,IAAMC,WC8BnBa,E,kDA3Bb,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IACDE,MAAQ,CACX2B,MAAO,GAET,EAAKC,OAAS,EAAKA,OAAOL,KAAZ,gBALG,E,mDAOZI,GACLzB,KAAKS,SAAS,CACZgB,MAAOA,M,+BAIT,OACE,6BACwB,IAArBzB,KAAKF,MAAM2B,MACV,kBAAC,EAAD,CAAO5B,cAAeG,KAAKF,MAAM2B,QAEjC,qCAGF,kBAAC,EAAD,CAAeR,mBAAoBjB,KAAK0B,c,GAtBxBhB,IAAMC,WCOfgB,MARf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,QCMcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8b9de3bf.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    var { timeInSeconds } = this.props;\n    this.state = {\n      seconds: timeInSeconds,\n    };\n  }\n  formatTime(timeInSeconds) {\n    if (this.state.seconds == 0) {\n      clearInterval(this.myInterval);\n    }\n    var seconds = timeInSeconds % 60;\n    var minutes = Math.floor(timeInSeconds / 60);\n\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n\n    return minutes + \":\" + seconds;\n  }\n\n  render() {\n    return (\n      <div className=\"clock\">\n        <span className=\"clock-text\">\n          <h1>{this.formatTime(this.state.seconds)}</h1>\n        </span>\n      </div>\n    );\n  }\n  componentDidMount() {\n    this.myInterval = setInterval(() => {\n      this.setState({\n        seconds: this.state.seconds - 1,\n      });\n    }, 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.myInterval);\n  }\n}\n\nexport default Clock;\n","import React from \"react\";\n\nclass CountdownForm extends React.Component {\n  onSubmit(e) {\n    var secondsStr = this.refs.seconds.value;\n    this.props.onSetCountdownTime(secondsStr);\n    this.refs.seconds.value = \"\";\n    e.preventDefault();\n  }\n  render() {\n    return (\n      <div>\n        <form\n          ref=\"form\"\n          onSubmit={this.onSubmit.bind(this)}\n          className=\"countdown-form\"\n        >\n          <input\n            type=\"text\"\n            ref=\"seconds\"\n            placeholder=\"Enter time in seconds\"\n          />\n          <input\n            type=\"submit\"\n            className=\"button success expanded\"\n            value=\"Start Countdown\"\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CountdownForm;\n","import React from \"react\";\nimport Clock from \"./Clock\";\nimport CountdownForm from \"./CountdownForm\";\n\nclass Countdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n    };\n    this.update = this.update.bind(this);\n  }\n  update(count) {\n    this.setState({\n      count: count,\n    });\n  }\n  render() {\n    return (\n      <div>\n        {this.state.count !== 0 ? (\n          <Clock timeInSeconds={this.state.count} />\n        ) : (\n          <h1>00:00</h1>\n        )}\n\n        <CountdownForm onSetCountdownTime={this.update} />\n      </div>\n    );\n  }\n}\n\nexport default Countdown;\n","import React from \"react\";\nimport \"./App.css\";\nimport Countdown from \"./components/Countdown\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Countdown></Countdown>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}